stdout_file="recorder.log"
stderr_file="recorder.log"
url="ws://ws.pusherapp.com:80/app/de504dc5763aeef9ff52?client=YourArbitraryStringHere&version=0.2.0&protocol=6"

# WebSocket name will appear in the name of the data text file
ws_name = "bitstamp" 

# To start receiving the data we need to send the WebSocket endpoint some messages.
# Typucally these message are subscribe requests to a WebSocket channel.
# The channel names are usually desriptive, like live_trades or order_book.
# Bitstamp has 4 channels, 3 of which are mentioned in the official documentation
# at https://www.bitstamp.net/websocket/. The channels are: live_trades, order_book,
# diff_order_book, and the undocumented live_orders. There may be more undocumented
# channels, but how to find them?
# The live_trades streams executed trades. The order_book channel
# streams full order book snapshot of 20 levels once there is a change in one
# or more levels. One thing to remember is that ideally a matching engine should
# process message non-concurrently, one by one. Hence every order book snapshot
# will contain only single change, like a quote removed, changed, or added. However
# the order_book channel sometimes gives snapshots which contain more than one change.
# Hence Bitstamp groups some of them. This is not ideal.
# The diff_order_book streams list of changed bids and asks since last. If
# a quote is removed, it will list it as for example 233.67 @ 0. 
# The undocmented channel live_orders streams the the order events. The
# following Python list contains the message, including subscription requests,
# to send to the WebSocket endpoint.
msg_to_send=[
'{"data": {"channel": "live_trades"}, "event": "pusher:subscribe"}',
'{"data": {"channel": "order_book"}, "event": "pusher:subscribe"}'
]

# machine ID where the recorder will be running
machine_id="PersonalDesktopLinux"

# Max lines to be written to the data file. After the maximum is reached, the file is closed and a new one is opened.
max_lines=10000

# Field separator that will separate the variables on one line. Do not
# use comma if possible, as the WebSockets data you receive may contain
# a comma already. Use tab preferrably.
field_separator = "\t"

# A Python list of custom messages that you want to write on each line
# as meta info. Can be empty or deleted. The list will be added to the 
# line, with list elements separated by the field_separator.
extra_meta_data = ['BTC', 'USD']


# where to write the files
data_dir = '/var/data'
